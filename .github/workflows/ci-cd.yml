name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  manage-certificates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl
      - name: Manage SSL Certificates
        run: ./scripts/manage-certificates.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
  version:
    needs: manage-certificates
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags!
      - name: Bump version
        id: bump
        run: |
          git fetch --tags
          latest=$(git tag --list 'v*' --sort=-v:refname | head -n1)
          if [ -z "$latest" ]; then
            latest="v0.0.0"
          fi
          echo "Latest tag: $latest"
          IFS='.' read -r major minor patch <<< "${latest#v}"
          if git log -1 --pretty=%B | grep -qE "fix:"; then
            patch=$((patch+1))
          elif git log -1 --pretty=%B | grep -qE "feat:"; then
            minor=$((minor+1)); patch=0
          else
            patch=$((patch+1))
          fi
          new_tag="v${major}.${minor}.${patch}"
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists. Skipping tag creation."
          else
            git tag $new_tag
            git push origin $new_tag
          fi
          echo "::set-output name=new_version::$new_tag"
  build-and-push:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/barkuni-api:${{ needs.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/barkuni-api:latest
          platforms: linux/amd64,linux/arm64
  deploy:
    needs: [build-and-push, manage-certificates]
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.5.0
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      CLUSTER_NAME: barkuni-eks
    steps:
      - uses: actions/checkout@v4
      - name: Install AWS CLI
        run: |
          apk add --no-cache curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false
      - name: Terraform Import Existing Resources
        run: |
          cd terraform
          # Import KMS alias if it exists
          if aws kms list-aliases --region $AWS_DEFAULT_REGION | grep -q 'alias/eks/barkuni-cluster'; then
            terraform import 'module.eks.module.kms.aws_kms_alias.this["cluster"]' arn:aws:kms:$AWS_DEFAULT_REGION:$(aws sts get-caller-identity --query Account --output text):alias/eks/barkuni-cluster || true
          fi
          # Import CloudWatch log group if it exists
          if aws logs describe-log-groups --log-group-name-prefix /aws/eks/barkuni-cluster/cluster --region $AWS_DEFAULT_REGION | grep -q '/aws/eks/barkuni-cluster/cluster'; then
            terraform import 'module.eks.aws_cloudwatch_log_group.this[0]' /aws/eks/barkuni-cluster/cluster || true
          fi
          # Import IAM role if it exists
          if aws iam get-role --role-name eks-alb-ingress-controller; then
            terraform import aws_iam_role.alb_ingress_controller eks-alb-ingress-controller || true
          fi
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
      - name: Configure Kubectl
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_DEFAULT_REGION
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Create/Update TLS Secret
        run: |
          kubectl create secret tls barkuni-tls \
            --cert=./certs/tls.crt \
            --key=./certs/tls.key \
            --namespace default \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy with Helm
        run: |
          helm upgrade --install barkuni ./helm/barkuni \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/barkuni-api \
            --set image.tag=${{ needs.version.outputs.version }} \
            --wait --timeout 5m